// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: org/podcastindex/podping/podping_medium.capnp


#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum PodpingMedium {
  Mixed = 0,
  Podcast = 1,
  PodcastL = 2,
  Music = 3,
  MusicL = 4,
  Video = 5,
  VideoL = 6,
  Film = 7,
  FilmL = 8,
  Audiobook = 9,
  AudiobookL = 10,
  Newsletter = 11,
  NewsletterL = 12,
  Blog = 13,
  BlogL = 14,
}
impl ::capnp::traits::FromU16 for PodpingMedium {
  #[inline]
  fn from_u16(value: u16) -> ::core::result::Result<PodpingMedium, ::capnp::NotInSchema> {
    match value {
      0 => ::core::result::Result::Ok(PodpingMedium::Mixed),
      1 => ::core::result::Result::Ok(PodpingMedium::Podcast),
      2 => ::core::result::Result::Ok(PodpingMedium::PodcastL),
      3 => ::core::result::Result::Ok(PodpingMedium::Music),
      4 => ::core::result::Result::Ok(PodpingMedium::MusicL),
      5 => ::core::result::Result::Ok(PodpingMedium::Video),
      6 => ::core::result::Result::Ok(PodpingMedium::VideoL),
      7 => ::core::result::Result::Ok(PodpingMedium::Film),
      8 => ::core::result::Result::Ok(PodpingMedium::FilmL),
      9 => ::core::result::Result::Ok(PodpingMedium::Audiobook),
      10 => ::core::result::Result::Ok(PodpingMedium::AudiobookL),
      11 => ::core::result::Result::Ok(PodpingMedium::Newsletter),
      12 => ::core::result::Result::Ok(PodpingMedium::NewsletterL),
      13 => ::core::result::Result::Ok(PodpingMedium::Blog),
      14 => ::core::result::Result::Ok(PodpingMedium::BlogL),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl ::capnp::traits::ToU16 for PodpingMedium {
  #[inline]
  fn to_u16(self) -> u16 { self as u16 }
}
impl ::capnp::traits::HasTypeId for PodpingMedium {
  #[inline]
  fn type_id() -> u64 { 0xaae8_1675_a576_a280u64 }
}
